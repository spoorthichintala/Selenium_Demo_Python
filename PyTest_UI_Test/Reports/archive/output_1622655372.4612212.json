{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 5}, "tests": {"0": {"status": "ERROR", "message": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x000001E0F016CEE0>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\venv\\lib\\site-packages\\_pytest\\runner.py:255: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n..\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:150: in pytest_runtest_setup\n    item.session._setupstate.prepare(item)\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:452: in prepare\n    raise e\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:449: in prepare\n    col.setup()\n..\\venv\\lib\\site-packages\\_pytest\\python.py:1647: in setup\n    self._request._fillfixtures()\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:568: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:581: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:601: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:687: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:1072: in execute\n    result = hook.pytest_fixture_setup(fixturedef=self, request=request)\n..\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:1126: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfixturefunc = <function driver_init at 0x000001E0EFA92550>, request = <SubRequest 'driver_init' for <Function test_open_url[Admin-admin123]>>, kwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[_FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> _FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[_FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n>               raise ValueError(f\"{request.fixturename} did not yield a value\") from None\nE               ValueError: driver_init did not yield a value\n\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:927: ValueError\n", "test_name": "test_open_url[Admin-admin123]", "rerun": "0"}, "1": {"status": "ERROR", "message": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x000001E0F0B77940>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\venv\\lib\\site-packages\\_pytest\\runner.py:255: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n..\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:150: in pytest_runtest_setup\n    item.session._setupstate.prepare(item)\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:452: in prepare\n    raise e\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:449: in prepare\n    col.setup()\n..\\venv\\lib\\site-packages\\_pytest\\python.py:1647: in setup\n    self._request._fillfixtures()\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:568: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:581: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:601: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:687: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:1072: in execute\n    result = hook.pytest_fixture_setup(fixturedef=self, request=request)\n..\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:1126: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfixturefunc = <function driver_init at 0x000001E0EFA92550>, request = <SubRequest 'driver_init' for <Function test_open_url[Admin1-admin123]>>, kwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[_FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> _FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[_FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n>               raise ValueError(f\"{request.fixturename} did not yield a value\") from None\nE               ValueError: driver_init did not yield a value\n\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:927: ValueError\n", "test_name": "test_open_url[Admin1-admin123]", "rerun": "0"}, "2": {"status": "ERROR", "message": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x000001E0F0B779D0>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\venv\\lib\\site-packages\\_pytest\\runner.py:255: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n..\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:150: in pytest_runtest_setup\n    item.session._setupstate.prepare(item)\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:452: in prepare\n    raise e\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:449: in prepare\n    col.setup()\n..\\venv\\lib\\site-packages\\_pytest\\python.py:1647: in setup\n    self._request._fillfixtures()\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:568: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:581: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:601: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:687: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:1072: in execute\n    result = hook.pytest_fixture_setup(fixturedef=self, request=request)\n..\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:1126: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfixturefunc = <function driver_init at 0x000001E0EFA92550>, request = <SubRequest 'driver_init' for <Function test_open_url[-admin123]>>, kwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[_FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> _FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[_FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n>               raise ValueError(f\"{request.fixturename} did not yield a value\") from None\nE               ValueError: driver_init did not yield a value\n\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:927: ValueError\n", "test_name": "test_open_url[-admin123]", "rerun": "0"}, "3": {"status": "ERROR", "message": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x000001E0F0210F70>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\venv\\lib\\site-packages\\_pytest\\runner.py:255: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n..\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:150: in pytest_runtest_setup\n    item.session._setupstate.prepare(item)\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:452: in prepare\n    raise e\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:449: in prepare\n    col.setup()\n..\\venv\\lib\\site-packages\\_pytest\\python.py:1647: in setup\n    self._request._fillfixtures()\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:568: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:581: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:601: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:687: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:1072: in execute\n    result = hook.pytest_fixture_setup(fixturedef=self, request=request)\n..\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:1126: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfixturefunc = <function driver_init at 0x000001E0EFA92550>, request = <SubRequest 'driver_init' for <Function test_open_url[Admin-admin1234]>>, kwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[_FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> _FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[_FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n>               raise ValueError(f\"{request.fixturename} did not yield a value\") from None\nE               ValueError: driver_init did not yield a value\n\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:927: ValueError\n", "test_name": "test_open_url[Admin-admin1234]", "rerun": "0"}, "4": {"status": "ERROR", "message": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x000001E0F0AE98B0>, when = 'setup'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: \"Callable[[], TResult]\",\n        when: \"Literal['collect', 'setup', 'call', 'teardown']\",\n        reraise: Optional[\n            Union[Type[BaseException], Tuple[Type[BaseException], ...]]\n        ] = None,\n    ) -> \"CallInfo[TResult]\":\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: Optional[TResult] = func()\n\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\venv\\lib\\site-packages\\_pytest\\runner.py:255: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\n..\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:150: in pytest_runtest_setup\n    item.session._setupstate.prepare(item)\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:452: in prepare\n    raise e\n..\\venv\\lib\\site-packages\\_pytest\\runner.py:449: in prepare\n    col.setup()\n..\\venv\\lib\\site-packages\\_pytest\\python.py:1647: in setup\n    self._request._fillfixtures()\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:568: in _fillfixtures\n    item.funcargs[argname] = self.getfixturevalue(argname)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:581: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:601: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:687: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:1072: in execute\n    result = hook.pytest_fixture_setup(fixturedef=self, request=request)\n..\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n..\\venv\\lib\\site-packages\\pluggy\\manager.py:84: in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:1126: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfixturefunc = <function driver_init at 0x000001E0EFA92550>, request = <SubRequest 'driver_init' for <Function test_open_url[Admin-]>>, kwargs = {}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[_FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> _FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[_FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n>               raise ValueError(f\"{request.fixturename} did not yield a value\") from None\nE               ValueError: driver_init did not yield a value\n\n..\\venv\\lib\\site-packages\\_pytest\\fixtures.py:927: ValueError\n", "test_name": "test_open_url[Admin-]", "rerun": "0"}}, "suite_name": "Orange_HRM_Parameterized_Data_Using_Fixtures_Capture_And_Compare_Result.py"}}}, "date": "June 02, 2021", "start_time": 1622654806.9376934, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "5", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "5"}